/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace StdInvariant {
  export type FuzzSelectorStruct = {
    addr: AddressLike;
    selectors: BytesLike[];
  };

  export type FuzzSelectorStructOutput = [addr: string, selectors: string[]] & {
    addr: string;
    selectors: string[];
  };

  export type FuzzInterfaceStruct = { addr: AddressLike; artifacts: string[] };

  export type FuzzInterfaceStructOutput = [
    addr: string,
    artifacts: string[]
  ] & { addr: string; artifacts: string[] };
}

export interface BBExchangeTestInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "IS_TEST"
      | "createAllowance"
      | "excludeArtifacts"
      | "excludeContracts"
      | "excludeSenders"
      | "failed"
      | "setUp"
      | "targetArtifactSelectors"
      | "targetArtifacts"
      | "targetContracts"
      | "targetInterfaces"
      | "targetSelectors"
      | "targetSenders"
      | "testAddLiquidityCorrectBalances"
      | "testAddLiquidityCorrectLiquidityAdded"
      | "testAddLiquidityCorrectReservesSet"
      | "testAddLiquidityDoesntChangeRate"
      | "testAddLiquidityExceedsMaxTokenAmount"
      | "testAddLiquidityInsufficientTokenBalance"
      | "testAddLiquidityMaxTokenAmountIsZero"
      | "testAddLiquidityMinLiquidityIsZero"
      | "testAddLiquidityNoEth"
      | "testAddLiquidityTokenTransferNotAllowed"
      | "testAddLiquidityUnderMinimumLiquidity"
      | "testCreatePoolAddLiquidityToCreator"
      | "testCreatePoolEthReservesCorrectlySet"
      | "testCreatePoolKCorrectlySet"
      | "testCreatePoolNoEthProvided"
      | "testCreatePoolProvideMoreTokensThanBalanceAllows"
      | "testCreatePoolProvideNoTokens"
      | "testCreatePoolTokenReservesCorrectlySet"
      | "testExample"
      | "testGetTokenAmountCorrect"
      | "testGetTokenAmountPoolNotInitialized"
      | "testGetTokenAmountZeroWeiAmount"
      | "testGetWeiAmountCorrect"
      | "testGetWeiAmountPoolNotInitialized"
      | "testGetWeiAmountZeroTokenAmount"
      | "testRemoveAllLiquidityCorrectBalances"
      | "testRemoveAllLiquidityNoLiquidity"
      | "testRemoveAllLiquiditySetCorrectLiquidity"
      | "testRemoveAllLiquiditySetCorrectReserves"
      | "testRemoveAllLiquidityTokenAmountBellowMin"
      | "testRemoveAllLiquidityWeiAmountBellowMin"
      | "testRemoveLiquidityCorrectBalances"
      | "testRemoveLiquidityNoEth"
      | "testRemoveLiquidityNoLiquidity"
      | "testRemoveLiquidityNotEnoughLiquidity"
      | "testRemoveLiquiditySetCorrectLiquidity"
      | "testRemoveLiquiditySetCorrectReserves"
      | "testRemoveLiquidityTokenAmountBellowMin"
      | "testRemoveLiquidityWeiAmountBellowMin"
      | "testSwapETHForTokensNoETH"
      | "testSwapETHForTokensNotEnoughLiquidity"
      | "testSwapETHForTokensTooMuchSlippage"
      | "testSwapETHForTokensTransferTokens"
      | "testSwapETHForTokensUpdateReserves"
      | "testSwapTokensForETHNoTokens"
      | "testSwapTokensForETHNotEnoughLiquidity"
      | "testSwapTokensForETHProvidedMoreTokensThanAllowed"
      | "testSwapTokensForETHProvidedMoreTokensThanBalanceAllows"
      | "testSwapTokensForETHTooMuchSlippage"
      | "testSwapTokensForETHTransferEth"
      | "testSwapTokensForETHTransferTokens"
      | "testSwapTokensForETHUpdateReserves"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "log"
      | "log_address"
      | "log_array(uint256[])"
      | "log_array(int256[])"
      | "log_array(address[])"
      | "log_bytes"
      | "log_bytes32"
      | "log_int"
      | "log_named_address"
      | "log_named_array(string,uint256[])"
      | "log_named_array(string,int256[])"
      | "log_named_array(string,address[])"
      | "log_named_bytes"
      | "log_named_bytes32"
      | "log_named_decimal_int"
      | "log_named_decimal_uint"
      | "log_named_int"
      | "log_named_string"
      | "log_named_uint"
      | "log_string"
      | "log_uint"
      | "logs"
  ): EventFragment;

  encodeFunctionData(functionFragment: "IS_TEST", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createAllowance",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeArtifacts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeSenders",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "failed", values?: undefined): string;
  encodeFunctionData(functionFragment: "setUp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "targetArtifactSelectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetArtifacts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetInterfaces",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetSelectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetSenders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testAddLiquidityCorrectBalances",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testAddLiquidityCorrectLiquidityAdded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testAddLiquidityCorrectReservesSet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testAddLiquidityDoesntChangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testAddLiquidityExceedsMaxTokenAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testAddLiquidityInsufficientTokenBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testAddLiquidityMaxTokenAmountIsZero",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testAddLiquidityMinLiquidityIsZero",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testAddLiquidityNoEth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testAddLiquidityTokenTransferNotAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testAddLiquidityUnderMinimumLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCreatePoolAddLiquidityToCreator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCreatePoolEthReservesCorrectlySet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCreatePoolKCorrectlySet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCreatePoolNoEthProvided",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCreatePoolProvideMoreTokensThanBalanceAllows",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCreatePoolProvideNoTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCreatePoolTokenReservesCorrectlySet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testExample",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testGetTokenAmountCorrect",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testGetTokenAmountPoolNotInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testGetTokenAmountZeroWeiAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testGetWeiAmountCorrect",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testGetWeiAmountPoolNotInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testGetWeiAmountZeroTokenAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRemoveAllLiquidityCorrectBalances",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRemoveAllLiquidityNoLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRemoveAllLiquiditySetCorrectLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRemoveAllLiquiditySetCorrectReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRemoveAllLiquidityTokenAmountBellowMin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRemoveAllLiquidityWeiAmountBellowMin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRemoveLiquidityCorrectBalances",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRemoveLiquidityNoEth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRemoveLiquidityNoLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRemoveLiquidityNotEnoughLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRemoveLiquiditySetCorrectLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRemoveLiquiditySetCorrectReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRemoveLiquidityTokenAmountBellowMin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRemoveLiquidityWeiAmountBellowMin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testSwapETHForTokensNoETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testSwapETHForTokensNotEnoughLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testSwapETHForTokensTooMuchSlippage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testSwapETHForTokensTransferTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testSwapETHForTokensUpdateReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testSwapTokensForETHNoTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testSwapTokensForETHNotEnoughLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testSwapTokensForETHProvidedMoreTokensThanAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testSwapTokensForETHProvidedMoreTokensThanBalanceAllows",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testSwapTokensForETHTooMuchSlippage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testSwapTokensForETHTransferEth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testSwapTokensForETHTransferTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testSwapTokensForETHUpdateReserves",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "IS_TEST", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeArtifacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "failed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "targetArtifactSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetArtifacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetInterfaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testAddLiquidityCorrectBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testAddLiquidityCorrectLiquidityAdded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testAddLiquidityCorrectReservesSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testAddLiquidityDoesntChangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testAddLiquidityExceedsMaxTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testAddLiquidityInsufficientTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testAddLiquidityMaxTokenAmountIsZero",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testAddLiquidityMinLiquidityIsZero",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testAddLiquidityNoEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testAddLiquidityTokenTransferNotAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testAddLiquidityUnderMinimumLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCreatePoolAddLiquidityToCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCreatePoolEthReservesCorrectlySet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCreatePoolKCorrectlySet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCreatePoolNoEthProvided",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCreatePoolProvideMoreTokensThanBalanceAllows",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCreatePoolProvideNoTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCreatePoolTokenReservesCorrectlySet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testExample",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetTokenAmountCorrect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetTokenAmountPoolNotInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetTokenAmountZeroWeiAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetWeiAmountCorrect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetWeiAmountPoolNotInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetWeiAmountZeroTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRemoveAllLiquidityCorrectBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRemoveAllLiquidityNoLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRemoveAllLiquiditySetCorrectLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRemoveAllLiquiditySetCorrectReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRemoveAllLiquidityTokenAmountBellowMin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRemoveAllLiquidityWeiAmountBellowMin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRemoveLiquidityCorrectBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRemoveLiquidityNoEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRemoveLiquidityNoLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRemoveLiquidityNotEnoughLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRemoveLiquiditySetCorrectLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRemoveLiquiditySetCorrectReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRemoveLiquidityTokenAmountBellowMin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRemoveLiquidityWeiAmountBellowMin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSwapETHForTokensNoETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSwapETHForTokensNotEnoughLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSwapETHForTokensTooMuchSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSwapETHForTokensTransferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSwapETHForTokensUpdateReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSwapTokensForETHNoTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSwapTokensForETHNotEnoughLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSwapTokensForETHProvidedMoreTokensThanAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSwapTokensForETHProvidedMoreTokensThanBalanceAllows",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSwapTokensForETHTooMuchSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSwapTokensForETHTransferEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSwapTokensForETHTransferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSwapTokensForETHUpdateReserves",
    data: BytesLike
  ): Result;
}

export namespace logEvent {
  export type InputTuple = [arg0: string];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_addressEvent {
  export type InputTuple = [arg0: AddressLike];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_array_uint256_array_Event {
  export type InputTuple = [val: BigNumberish[]];
  export type OutputTuple = [val: bigint[]];
  export interface OutputObject {
    val: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_array_int256_array_Event {
  export type InputTuple = [val: BigNumberish[]];
  export type OutputTuple = [val: bigint[]];
  export interface OutputObject {
    val: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_array_address_array_Event {
  export type InputTuple = [val: AddressLike[]];
  export type OutputTuple = [val: string[]];
  export interface OutputObject {
    val: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_bytesEvent {
  export type InputTuple = [arg0: BytesLike];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_bytes32Event {
  export type InputTuple = [arg0: BytesLike];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_intEvent {
  export type InputTuple = [arg0: BigNumberish];
  export type OutputTuple = [arg0: bigint];
  export interface OutputObject {
    arg0: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_addressEvent {
  export type InputTuple = [key: string, val: AddressLike];
  export type OutputTuple = [key: string, val: string];
  export interface OutputObject {
    key: string;
    val: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_array_string_uint256_array_Event {
  export type InputTuple = [key: string, val: BigNumberish[]];
  export type OutputTuple = [key: string, val: bigint[]];
  export interface OutputObject {
    key: string;
    val: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_array_string_int256_array_Event {
  export type InputTuple = [key: string, val: BigNumberish[]];
  export type OutputTuple = [key: string, val: bigint[]];
  export interface OutputObject {
    key: string;
    val: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_array_string_address_array_Event {
  export type InputTuple = [key: string, val: AddressLike[]];
  export type OutputTuple = [key: string, val: string[]];
  export interface OutputObject {
    key: string;
    val: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_bytesEvent {
  export type InputTuple = [key: string, val: BytesLike];
  export type OutputTuple = [key: string, val: string];
  export interface OutputObject {
    key: string;
    val: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_bytes32Event {
  export type InputTuple = [key: string, val: BytesLike];
  export type OutputTuple = [key: string, val: string];
  export interface OutputObject {
    key: string;
    val: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_decimal_intEvent {
  export type InputTuple = [
    key: string,
    val: BigNumberish,
    decimals: BigNumberish
  ];
  export type OutputTuple = [key: string, val: bigint, decimals: bigint];
  export interface OutputObject {
    key: string;
    val: bigint;
    decimals: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_decimal_uintEvent {
  export type InputTuple = [
    key: string,
    val: BigNumberish,
    decimals: BigNumberish
  ];
  export type OutputTuple = [key: string, val: bigint, decimals: bigint];
  export interface OutputObject {
    key: string;
    val: bigint;
    decimals: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_intEvent {
  export type InputTuple = [key: string, val: BigNumberish];
  export type OutputTuple = [key: string, val: bigint];
  export interface OutputObject {
    key: string;
    val: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_stringEvent {
  export type InputTuple = [key: string, val: string];
  export type OutputTuple = [key: string, val: string];
  export interface OutputObject {
    key: string;
    val: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_uintEvent {
  export type InputTuple = [key: string, val: BigNumberish];
  export type OutputTuple = [key: string, val: bigint];
  export interface OutputObject {
    key: string;
    val: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_stringEvent {
  export type InputTuple = [arg0: string];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_uintEvent {
  export type InputTuple = [arg0: BigNumberish];
  export type OutputTuple = [arg0: bigint];
  export interface OutputObject {
    arg0: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace logsEvent {
  export type InputTuple = [arg0: BytesLike];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BBExchangeTest extends BaseContract {
  connect(runner?: ContractRunner | null): BBExchangeTest;
  waitForDeployment(): Promise<this>;

  interface: BBExchangeTestInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  IS_TEST: TypedContractMethod<[], [boolean], "view">;

  createAllowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  excludeArtifacts: TypedContractMethod<[], [string[]], "view">;

  excludeContracts: TypedContractMethod<[], [string[]], "view">;

  excludeSenders: TypedContractMethod<[], [string[]], "view">;

  failed: TypedContractMethod<[], [boolean], "view">;

  setUp: TypedContractMethod<[], [void], "nonpayable">;

  targetArtifactSelectors: TypedContractMethod<
    [],
    [StdInvariant.FuzzSelectorStructOutput[]],
    "view"
  >;

  targetArtifacts: TypedContractMethod<[], [string[]], "view">;

  targetContracts: TypedContractMethod<[], [string[]], "view">;

  targetInterfaces: TypedContractMethod<
    [],
    [StdInvariant.FuzzInterfaceStructOutput[]],
    "view"
  >;

  targetSelectors: TypedContractMethod<
    [],
    [StdInvariant.FuzzSelectorStructOutput[]],
    "view"
  >;

  targetSenders: TypedContractMethod<[], [string[]], "view">;

  testAddLiquidityCorrectBalances: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testAddLiquidityCorrectLiquidityAdded: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testAddLiquidityCorrectReservesSet: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testAddLiquidityDoesntChangeRate: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testAddLiquidityExceedsMaxTokenAmount: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testAddLiquidityInsufficientTokenBalance: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testAddLiquidityMaxTokenAmountIsZero: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testAddLiquidityMinLiquidityIsZero: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testAddLiquidityNoEth: TypedContractMethod<[], [void], "nonpayable">;

  testAddLiquidityTokenTransferNotAllowed: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testAddLiquidityUnderMinimumLiquidity: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testCreatePoolAddLiquidityToCreator: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testCreatePoolEthReservesCorrectlySet: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testCreatePoolKCorrectlySet: TypedContractMethod<[], [void], "nonpayable">;

  testCreatePoolNoEthProvided: TypedContractMethod<[], [void], "nonpayable">;

  testCreatePoolProvideMoreTokensThanBalanceAllows: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testCreatePoolProvideNoTokens: TypedContractMethod<[], [void], "nonpayable">;

  testCreatePoolTokenReservesCorrectlySet: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testExample: TypedContractMethod<[], [void], "nonpayable">;

  testGetTokenAmountCorrect: TypedContractMethod<[], [void], "nonpayable">;

  testGetTokenAmountPoolNotInitialized: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testGetTokenAmountZeroWeiAmount: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testGetWeiAmountCorrect: TypedContractMethod<[], [void], "nonpayable">;

  testGetWeiAmountPoolNotInitialized: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testGetWeiAmountZeroTokenAmount: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testRemoveAllLiquidityCorrectBalances: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testRemoveAllLiquidityNoLiquidity: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testRemoveAllLiquiditySetCorrectLiquidity: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testRemoveAllLiquiditySetCorrectReserves: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testRemoveAllLiquidityTokenAmountBellowMin: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testRemoveAllLiquidityWeiAmountBellowMin: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testRemoveLiquidityCorrectBalances: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testRemoveLiquidityNoEth: TypedContractMethod<[], [void], "nonpayable">;

  testRemoveLiquidityNoLiquidity: TypedContractMethod<[], [void], "nonpayable">;

  testRemoveLiquidityNotEnoughLiquidity: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testRemoveLiquiditySetCorrectLiquidity: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testRemoveLiquiditySetCorrectReserves: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testRemoveLiquidityTokenAmountBellowMin: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testRemoveLiquidityWeiAmountBellowMin: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testSwapETHForTokensNoETH: TypedContractMethod<[], [void], "nonpayable">;

  testSwapETHForTokensNotEnoughLiquidity: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testSwapETHForTokensTooMuchSlippage: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testSwapETHForTokensTransferTokens: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testSwapETHForTokensUpdateReserves: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testSwapTokensForETHNoTokens: TypedContractMethod<[], [void], "nonpayable">;

  testSwapTokensForETHNotEnoughLiquidity: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testSwapTokensForETHProvidedMoreTokensThanAllowed: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testSwapTokensForETHProvidedMoreTokensThanBalanceAllows: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testSwapTokensForETHTooMuchSlippage: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testSwapTokensForETHTransferEth: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testSwapTokensForETHTransferTokens: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testSwapTokensForETHUpdateReserves: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "IS_TEST"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "createAllowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "excludeArtifacts"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "excludeContracts"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "excludeSenders"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "failed"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "setUp"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "targetArtifactSelectors"
  ): TypedContractMethod<[], [StdInvariant.FuzzSelectorStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "targetArtifacts"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "targetContracts"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "targetInterfaces"
  ): TypedContractMethod<
    [],
    [StdInvariant.FuzzInterfaceStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "targetSelectors"
  ): TypedContractMethod<[], [StdInvariant.FuzzSelectorStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "targetSenders"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "testAddLiquidityCorrectBalances"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testAddLiquidityCorrectLiquidityAdded"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testAddLiquidityCorrectReservesSet"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testAddLiquidityDoesntChangeRate"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testAddLiquidityExceedsMaxTokenAmount"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testAddLiquidityInsufficientTokenBalance"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testAddLiquidityMaxTokenAmountIsZero"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testAddLiquidityMinLiquidityIsZero"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testAddLiquidityNoEth"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testAddLiquidityTokenTransferNotAllowed"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testAddLiquidityUnderMinimumLiquidity"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testCreatePoolAddLiquidityToCreator"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testCreatePoolEthReservesCorrectlySet"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testCreatePoolKCorrectlySet"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testCreatePoolNoEthProvided"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testCreatePoolProvideMoreTokensThanBalanceAllows"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testCreatePoolProvideNoTokens"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testCreatePoolTokenReservesCorrectlySet"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testExample"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testGetTokenAmountCorrect"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testGetTokenAmountPoolNotInitialized"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testGetTokenAmountZeroWeiAmount"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testGetWeiAmountCorrect"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testGetWeiAmountPoolNotInitialized"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testGetWeiAmountZeroTokenAmount"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testRemoveAllLiquidityCorrectBalances"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testRemoveAllLiquidityNoLiquidity"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testRemoveAllLiquiditySetCorrectLiquidity"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testRemoveAllLiquiditySetCorrectReserves"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testRemoveAllLiquidityTokenAmountBellowMin"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testRemoveAllLiquidityWeiAmountBellowMin"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testRemoveLiquidityCorrectBalances"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testRemoveLiquidityNoEth"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testRemoveLiquidityNoLiquidity"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testRemoveLiquidityNotEnoughLiquidity"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testRemoveLiquiditySetCorrectLiquidity"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testRemoveLiquiditySetCorrectReserves"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testRemoveLiquidityTokenAmountBellowMin"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testRemoveLiquidityWeiAmountBellowMin"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testSwapETHForTokensNoETH"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testSwapETHForTokensNotEnoughLiquidity"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testSwapETHForTokensTooMuchSlippage"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testSwapETHForTokensTransferTokens"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testSwapETHForTokensUpdateReserves"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testSwapTokensForETHNoTokens"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testSwapTokensForETHNotEnoughLiquidity"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testSwapTokensForETHProvidedMoreTokensThanAllowed"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testSwapTokensForETHProvidedMoreTokensThanBalanceAllows"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testSwapTokensForETHTooMuchSlippage"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testSwapTokensForETHTransferEth"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testSwapTokensForETHTransferTokens"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testSwapTokensForETHUpdateReserves"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "log"
  ): TypedContractEvent<
    logEvent.InputTuple,
    logEvent.OutputTuple,
    logEvent.OutputObject
  >;
  getEvent(
    key: "log_address"
  ): TypedContractEvent<
    log_addressEvent.InputTuple,
    log_addressEvent.OutputTuple,
    log_addressEvent.OutputObject
  >;
  getEvent(
    key: "log_array(uint256[])"
  ): TypedContractEvent<
    log_array_uint256_array_Event.InputTuple,
    log_array_uint256_array_Event.OutputTuple,
    log_array_uint256_array_Event.OutputObject
  >;
  getEvent(
    key: "log_array(int256[])"
  ): TypedContractEvent<
    log_array_int256_array_Event.InputTuple,
    log_array_int256_array_Event.OutputTuple,
    log_array_int256_array_Event.OutputObject
  >;
  getEvent(
    key: "log_array(address[])"
  ): TypedContractEvent<
    log_array_address_array_Event.InputTuple,
    log_array_address_array_Event.OutputTuple,
    log_array_address_array_Event.OutputObject
  >;
  getEvent(
    key: "log_bytes"
  ): TypedContractEvent<
    log_bytesEvent.InputTuple,
    log_bytesEvent.OutputTuple,
    log_bytesEvent.OutputObject
  >;
  getEvent(
    key: "log_bytes32"
  ): TypedContractEvent<
    log_bytes32Event.InputTuple,
    log_bytes32Event.OutputTuple,
    log_bytes32Event.OutputObject
  >;
  getEvent(
    key: "log_int"
  ): TypedContractEvent<
    log_intEvent.InputTuple,
    log_intEvent.OutputTuple,
    log_intEvent.OutputObject
  >;
  getEvent(
    key: "log_named_address"
  ): TypedContractEvent<
    log_named_addressEvent.InputTuple,
    log_named_addressEvent.OutputTuple,
    log_named_addressEvent.OutputObject
  >;
  getEvent(
    key: "log_named_array(string,uint256[])"
  ): TypedContractEvent<
    log_named_array_string_uint256_array_Event.InputTuple,
    log_named_array_string_uint256_array_Event.OutputTuple,
    log_named_array_string_uint256_array_Event.OutputObject
  >;
  getEvent(
    key: "log_named_array(string,int256[])"
  ): TypedContractEvent<
    log_named_array_string_int256_array_Event.InputTuple,
    log_named_array_string_int256_array_Event.OutputTuple,
    log_named_array_string_int256_array_Event.OutputObject
  >;
  getEvent(
    key: "log_named_array(string,address[])"
  ): TypedContractEvent<
    log_named_array_string_address_array_Event.InputTuple,
    log_named_array_string_address_array_Event.OutputTuple,
    log_named_array_string_address_array_Event.OutputObject
  >;
  getEvent(
    key: "log_named_bytes"
  ): TypedContractEvent<
    log_named_bytesEvent.InputTuple,
    log_named_bytesEvent.OutputTuple,
    log_named_bytesEvent.OutputObject
  >;
  getEvent(
    key: "log_named_bytes32"
  ): TypedContractEvent<
    log_named_bytes32Event.InputTuple,
    log_named_bytes32Event.OutputTuple,
    log_named_bytes32Event.OutputObject
  >;
  getEvent(
    key: "log_named_decimal_int"
  ): TypedContractEvent<
    log_named_decimal_intEvent.InputTuple,
    log_named_decimal_intEvent.OutputTuple,
    log_named_decimal_intEvent.OutputObject
  >;
  getEvent(
    key: "log_named_decimal_uint"
  ): TypedContractEvent<
    log_named_decimal_uintEvent.InputTuple,
    log_named_decimal_uintEvent.OutputTuple,
    log_named_decimal_uintEvent.OutputObject
  >;
  getEvent(
    key: "log_named_int"
  ): TypedContractEvent<
    log_named_intEvent.InputTuple,
    log_named_intEvent.OutputTuple,
    log_named_intEvent.OutputObject
  >;
  getEvent(
    key: "log_named_string"
  ): TypedContractEvent<
    log_named_stringEvent.InputTuple,
    log_named_stringEvent.OutputTuple,
    log_named_stringEvent.OutputObject
  >;
  getEvent(
    key: "log_named_uint"
  ): TypedContractEvent<
    log_named_uintEvent.InputTuple,
    log_named_uintEvent.OutputTuple,
    log_named_uintEvent.OutputObject
  >;
  getEvent(
    key: "log_string"
  ): TypedContractEvent<
    log_stringEvent.InputTuple,
    log_stringEvent.OutputTuple,
    log_stringEvent.OutputObject
  >;
  getEvent(
    key: "log_uint"
  ): TypedContractEvent<
    log_uintEvent.InputTuple,
    log_uintEvent.OutputTuple,
    log_uintEvent.OutputObject
  >;
  getEvent(
    key: "logs"
  ): TypedContractEvent<
    logsEvent.InputTuple,
    logsEvent.OutputTuple,
    logsEvent.OutputObject
  >;

  filters: {
    "log(string)": TypedContractEvent<
      logEvent.InputTuple,
      logEvent.OutputTuple,
      logEvent.OutputObject
    >;
    log: TypedContractEvent<
      logEvent.InputTuple,
      logEvent.OutputTuple,
      logEvent.OutputObject
    >;

    "log_address(address)": TypedContractEvent<
      log_addressEvent.InputTuple,
      log_addressEvent.OutputTuple,
      log_addressEvent.OutputObject
    >;
    log_address: TypedContractEvent<
      log_addressEvent.InputTuple,
      log_addressEvent.OutputTuple,
      log_addressEvent.OutputObject
    >;

    "log_array(uint256[])": TypedContractEvent<
      log_array_uint256_array_Event.InputTuple,
      log_array_uint256_array_Event.OutputTuple,
      log_array_uint256_array_Event.OutputObject
    >;
    "log_array(int256[])": TypedContractEvent<
      log_array_int256_array_Event.InputTuple,
      log_array_int256_array_Event.OutputTuple,
      log_array_int256_array_Event.OutputObject
    >;
    "log_array(address[])": TypedContractEvent<
      log_array_address_array_Event.InputTuple,
      log_array_address_array_Event.OutputTuple,
      log_array_address_array_Event.OutputObject
    >;

    "log_bytes(bytes)": TypedContractEvent<
      log_bytesEvent.InputTuple,
      log_bytesEvent.OutputTuple,
      log_bytesEvent.OutputObject
    >;
    log_bytes: TypedContractEvent<
      log_bytesEvent.InputTuple,
      log_bytesEvent.OutputTuple,
      log_bytesEvent.OutputObject
    >;

    "log_bytes32(bytes32)": TypedContractEvent<
      log_bytes32Event.InputTuple,
      log_bytes32Event.OutputTuple,
      log_bytes32Event.OutputObject
    >;
    log_bytes32: TypedContractEvent<
      log_bytes32Event.InputTuple,
      log_bytes32Event.OutputTuple,
      log_bytes32Event.OutputObject
    >;

    "log_int(int256)": TypedContractEvent<
      log_intEvent.InputTuple,
      log_intEvent.OutputTuple,
      log_intEvent.OutputObject
    >;
    log_int: TypedContractEvent<
      log_intEvent.InputTuple,
      log_intEvent.OutputTuple,
      log_intEvent.OutputObject
    >;

    "log_named_address(string,address)": TypedContractEvent<
      log_named_addressEvent.InputTuple,
      log_named_addressEvent.OutputTuple,
      log_named_addressEvent.OutputObject
    >;
    log_named_address: TypedContractEvent<
      log_named_addressEvent.InputTuple,
      log_named_addressEvent.OutputTuple,
      log_named_addressEvent.OutputObject
    >;

    "log_named_array(string,uint256[])": TypedContractEvent<
      log_named_array_string_uint256_array_Event.InputTuple,
      log_named_array_string_uint256_array_Event.OutputTuple,
      log_named_array_string_uint256_array_Event.OutputObject
    >;
    "log_named_array(string,int256[])": TypedContractEvent<
      log_named_array_string_int256_array_Event.InputTuple,
      log_named_array_string_int256_array_Event.OutputTuple,
      log_named_array_string_int256_array_Event.OutputObject
    >;
    "log_named_array(string,address[])": TypedContractEvent<
      log_named_array_string_address_array_Event.InputTuple,
      log_named_array_string_address_array_Event.OutputTuple,
      log_named_array_string_address_array_Event.OutputObject
    >;

    "log_named_bytes(string,bytes)": TypedContractEvent<
      log_named_bytesEvent.InputTuple,
      log_named_bytesEvent.OutputTuple,
      log_named_bytesEvent.OutputObject
    >;
    log_named_bytes: TypedContractEvent<
      log_named_bytesEvent.InputTuple,
      log_named_bytesEvent.OutputTuple,
      log_named_bytesEvent.OutputObject
    >;

    "log_named_bytes32(string,bytes32)": TypedContractEvent<
      log_named_bytes32Event.InputTuple,
      log_named_bytes32Event.OutputTuple,
      log_named_bytes32Event.OutputObject
    >;
    log_named_bytes32: TypedContractEvent<
      log_named_bytes32Event.InputTuple,
      log_named_bytes32Event.OutputTuple,
      log_named_bytes32Event.OutputObject
    >;

    "log_named_decimal_int(string,int256,uint256)": TypedContractEvent<
      log_named_decimal_intEvent.InputTuple,
      log_named_decimal_intEvent.OutputTuple,
      log_named_decimal_intEvent.OutputObject
    >;
    log_named_decimal_int: TypedContractEvent<
      log_named_decimal_intEvent.InputTuple,
      log_named_decimal_intEvent.OutputTuple,
      log_named_decimal_intEvent.OutputObject
    >;

    "log_named_decimal_uint(string,uint256,uint256)": TypedContractEvent<
      log_named_decimal_uintEvent.InputTuple,
      log_named_decimal_uintEvent.OutputTuple,
      log_named_decimal_uintEvent.OutputObject
    >;
    log_named_decimal_uint: TypedContractEvent<
      log_named_decimal_uintEvent.InputTuple,
      log_named_decimal_uintEvent.OutputTuple,
      log_named_decimal_uintEvent.OutputObject
    >;

    "log_named_int(string,int256)": TypedContractEvent<
      log_named_intEvent.InputTuple,
      log_named_intEvent.OutputTuple,
      log_named_intEvent.OutputObject
    >;
    log_named_int: TypedContractEvent<
      log_named_intEvent.InputTuple,
      log_named_intEvent.OutputTuple,
      log_named_intEvent.OutputObject
    >;

    "log_named_string(string,string)": TypedContractEvent<
      log_named_stringEvent.InputTuple,
      log_named_stringEvent.OutputTuple,
      log_named_stringEvent.OutputObject
    >;
    log_named_string: TypedContractEvent<
      log_named_stringEvent.InputTuple,
      log_named_stringEvent.OutputTuple,
      log_named_stringEvent.OutputObject
    >;

    "log_named_uint(string,uint256)": TypedContractEvent<
      log_named_uintEvent.InputTuple,
      log_named_uintEvent.OutputTuple,
      log_named_uintEvent.OutputObject
    >;
    log_named_uint: TypedContractEvent<
      log_named_uintEvent.InputTuple,
      log_named_uintEvent.OutputTuple,
      log_named_uintEvent.OutputObject
    >;

    "log_string(string)": TypedContractEvent<
      log_stringEvent.InputTuple,
      log_stringEvent.OutputTuple,
      log_stringEvent.OutputObject
    >;
    log_string: TypedContractEvent<
      log_stringEvent.InputTuple,
      log_stringEvent.OutputTuple,
      log_stringEvent.OutputObject
    >;

    "log_uint(uint256)": TypedContractEvent<
      log_uintEvent.InputTuple,
      log_uintEvent.OutputTuple,
      log_uintEvent.OutputObject
    >;
    log_uint: TypedContractEvent<
      log_uintEvent.InputTuple,
      log_uintEvent.OutputTuple,
      log_uintEvent.OutputObject
    >;

    "logs(bytes)": TypedContractEvent<
      logsEvent.InputTuple,
      logsEvent.OutputTuple,
      logsEvent.OutputObject
    >;
    logs: TypedContractEvent<
      logsEvent.InputTuple,
      logsEvent.OutputTuple,
      logsEvent.OutputObject
    >;
  };
}
