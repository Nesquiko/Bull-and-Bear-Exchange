/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace DeployConfig {
  export type NetworkConfigStruct = {
    chainId: BigNumberish;
    deployerPK: BigNumberish;
  };

  export type NetworkConfigStructOutput = [
    chainId: bigint,
    deployerPK: bigint
  ] & { chainId: bigint; deployerPK: bigint };
}

export interface DeployConfigInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ANVIL_CHAIN_ID"
      | "ANVIL_KEY"
      | "IS_SCRIPT"
      | "SEPOLIA_CHAIN_ID"
      | "activeConfig"
      | "getAnvilConfig"
      | "getSepoliaConfig"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ANVIL_CHAIN_ID",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ANVIL_KEY", values?: undefined): string;
  encodeFunctionData(functionFragment: "IS_SCRIPT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SEPOLIA_CHAIN_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAnvilConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSepoliaConfig",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ANVIL_CHAIN_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ANVIL_KEY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "IS_SCRIPT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SEPOLIA_CHAIN_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAnvilConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSepoliaConfig",
    data: BytesLike
  ): Result;
}

export interface DeployConfig extends BaseContract {
  connect(runner?: ContractRunner | null): DeployConfig;
  waitForDeployment(): Promise<this>;

  interface: DeployConfigInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ANVIL_CHAIN_ID: TypedContractMethod<[], [bigint], "view">;

  ANVIL_KEY: TypedContractMethod<[], [bigint], "view">;

  IS_SCRIPT: TypedContractMethod<[], [boolean], "view">;

  SEPOLIA_CHAIN_ID: TypedContractMethod<[], [bigint], "view">;

  activeConfig: TypedContractMethod<
    [],
    [[bigint, bigint] & { chainId: bigint; deployerPK: bigint }],
    "view"
  >;

  getAnvilConfig: TypedContractMethod<
    [],
    [DeployConfig.NetworkConfigStructOutput],
    "view"
  >;

  getSepoliaConfig: TypedContractMethod<
    [],
    [DeployConfig.NetworkConfigStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ANVIL_CHAIN_ID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ANVIL_KEY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "IS_SCRIPT"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "SEPOLIA_CHAIN_ID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "activeConfig"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { chainId: bigint; deployerPK: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAnvilConfig"
  ): TypedContractMethod<[], [DeployConfig.NetworkConfigStructOutput], "view">;
  getFunction(
    nameOrSignature: "getSepoliaConfig"
  ): TypedContractMethod<[], [DeployConfig.NetworkConfigStructOutput], "view">;

  filters: {};
}
