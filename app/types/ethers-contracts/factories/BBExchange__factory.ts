/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type { BBExchange, BBExchangeInterface } from "../BBExchange";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "bbTokenAddr",
        type: "address",
        internalType: "address",
      },
      {
        name: "initialOwner",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "EXCHANGE_NAME",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "MIN_LIQUIDITY",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "addLiquidity",
    inputs: [
      {
        name: "minWeiAmount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "tokenAmount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "minTokenAmount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "createPool",
    inputs: [
      {
        name: "amountTokens",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "getSwapFee",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getTokenAmount",
    inputs: [
      {
        name: "weiAmount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "tokenAmount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "withFee",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getWeiAmount",
    inputs: [
      {
        name: "tokenAmount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "weiAmount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "withFee",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "k",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "lpAt",
    inputs: [
      {
        name: "index",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "lpLiquidity",
    inputs: [
      {
        name: "lp",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "owner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "removeAllLiquidity",
    inputs: [
      {
        name: "maxExchangeRate",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "minExchangeRate",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "removeLiquidity",
    inputs: [
      {
        name: "amountETH",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "maxExchangeRate",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "minExchangeRate",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "renounceOwnership",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "swapETHForTokens",
    inputs: [
      {
        name: "minTokenAmount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "swapTokensForETH",
    inputs: [
      {
        name: "tokenAmount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "token",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract BBToken",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "tokenReserves",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "totalLiquidity",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "transferOwnership",
    inputs: [
      {
        name: "newOwner",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "weiReserves",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "event",
    name: "OwnershipTransferred",
    inputs: [
      {
        name: "previousOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "newOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "OwnableInvalidOwner",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "OwnableUnauthorizedAccount",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address",
      },
    ],
  },
] as const;

const _bytecode =
  "0x60a0604052600060025560006003556003600755606460085534801561002457600080fd5b50604051611ae5380380611ae5833981016040819052610043916100fa565b806001600160a01b03811661007257604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61007b8161008e565b50506001600160a01b031660805261012d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146100f557600080fd5b919050565b6000806040838503121561010d57600080fd5b610116836100de565b9150610124602084016100de565b90509250929050565b60805161195761018e600039600081816103ba01528181610516015281816106f6015281816107c80152818161094f01528181610cd801528181610e2101528181610eac01528181611201015281816112d301526113ea01526119576000f3fe60806040526004361061012a5760003560e01c8063857620e1116100ab578063c49ce20d1161006f578063c49ce20d1461031a578063d4cadf6814610330578063dbf53e3a14610348578063e56a645e14610368578063f2fde38b14610388578063fc0c546a146103a857600080fd5b8063857620e1146102505780638da5cb5b146102635780639f81a3b314610295578063b4f40c61146102e4578063c2507ac1146102fa57600080fd5b80634bad9510116100f25780634bad9510146101cb57806358ad6de4146101e1578063715018a6146101f35780638259e6a01461020857806382d5d7ac1461021b57600080fd5b806315770f921461012f57806321b77d63146101585780632eab28411461016d578063335380c514610182578063422f1043146101b8575b600080fd5b34801561013b57600080fd5b5061014560065481565b6040519081526020015b60405180910390f35b34801561016457600080fd5b50610145600181565b61018061017b36600461172a565b6103dc565b005b34801561018e57600080fd5b5061014561019d366004611743565b6001600160a01b031660009081526004602052604090205490565b6101806101c6366004611773565b610592565b3480156101d757600080fd5b5061014560025481565b6101806101ef36600461179f565b5050565b3480156101ff57600080fd5b50610180610bb4565b61018061021636600461172a565b610bc8565b34801561022757600080fd5b5061023b61023636600461172a565b610fbc565b6040805192835260208301919091520161014f565b61018061025e366004611773565b505050565b34801561026f57600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200161014f565b3480156102a157600080fd5b506102d76040518060400160405280601681526020017542756c6c20616e6420426561722045786368616e676560501b81525081565b60405161014f91906117c1565b3480156102f057600080fd5b5061014560015481565b34801561030657600080fd5b5061023b61031536600461172a565b61109e565b34801561032657600080fd5b5061014560035481565b34801561033c57600080fd5b5060075460085461023b565b34801561035457600080fd5b5061027d61036336600461172a565b611174565b34801561037457600080fd5b5061018061038336600461172a565b6111a4565b34801561039457600080fd5b506101806103a3366004611743565b611520565b3480156103b457600080fd5b5061027d7f000000000000000000000000000000000000000000000000000000000000000081565b34806104225760405162461bcd60e51b815260206004820152601060248201526f04e6565642045544820746f20737761760841b60448201526064015b60405180910390fd5b60008061042e8361109e565b915091506001826002546104429190611826565b116104865760405162461bcd60e51b81526020600482015260146024820152734e6f7420656e6f756768206c697175696469747960601b6044820152606401610419565b838110156104ca5760405162461bcd60e51b8152602060048201526011602482015270546f6f206d75636820736c69707061676560781b6044820152606401610419565b82600360008282546104dc919061183f565b9250508190555080600260008282546104f59190611826565b909155505060405163a9059cbb60e01b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610567573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058b9190611852565b5050505050565b34806105d25760405162461bcd60e51b815260206004820152600f60248201526e139bc8115512081c1c9bdd9a591959608a1b6044820152606401610419565b838110156106345760405162461bcd60e51b815260206004820152602960248201527f6d696e576569416d6f756e742063616e2774206265206d6f7265207468616e206044820152686d73672e76616c756560b81b6064820152608401610419565b600083116106795760405162461bcd60e51b8152602060048201526012602482015271139bc81d1bdad95b9cc81c1c9bdd9a59195960721b6044820152606401610419565b818310156106df5760405162461bcd60e51b815260206004820152602d60248201527f6d696e546f6b656e416d6f756e742063616e2774206265206c6573732074686160448201526c1b881d1bdad95b905b5bdd5b9d609a1b6064820152608401610419565b6040516370a0823160e01b815233600482015283907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610745573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107699190611874565b10156107ab5760405162461bcd60e51b81526020600482015260116024820152704e6f7420656e6f75676820746f6b656e7360781b6044820152606401610419565b604051636eb1769f60e11b815233600482015230602482015283907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063dd62ed3e90604401602060405180830381865afa158015610817573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083b9190611874565b10156108595760405162461bcd60e51b81526004016104199061188d565b600080600061086d8460035460025461155e565b90508581116108ca57848110156108bf5760405162461bcd60e51b81526020600482015260166024820152753a37b5b2b71038bab7ba32903132b63637bb9036b4b760511b6044820152606401610419565b83925080915061092a565b60006108db8760025460035461155e565b9050878110156109245760405162461bcd60e51b81526020600482015260146024820152733bb2b49038bab7ba32903132b63637bb9036b4b760611b6044820152606401610419565b92508591505b6040516323b872dd60e01b8152336004820152306024820152604481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af11580156109a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c49190611852565b905080610a0b5760405162461bcd60e51b81526020600482015260156024820152741d1bdad95b881d1c985b9cd9995c8819985a5b1959605a1b6044820152606401610419565b610a158486611826565b15610aaf5733610a258587611826565b604051600081818185875af1925050503d8060008114610a61576040519150601f19603f3d011682016040523d82523d6000602084013e610a66565b606091505b50508091505080610aaf5760405162461bcd60e51b81526020600482015260136024820152721dd95a481d1c985b9cd9995c8819985a5b1959606a1b6044820152606401610419565b600060035460065486610ac291906118d2565b610acc91906118e9565b3360009081526004602052604081205491925003610b2757600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b031916331790555b3360009081526004602052604081208054839290610b4690849061183f565b925050819055508060066000828254610b5f919061183f565b925050819055508460036000828254610b78919061183f565b925050819055508360026000828254610b91919061183f565b9091555050600254600354610ba691906118d2565b600155505050505050505050565b610bbc61161b565b610bc66000611648565b565b610bd061161b565b60025415610c205760405162461bcd60e51b815260206004820152601860248201527f546f6b656e20726573657276657320776173206e6f74203000000000000000006044820152606401610419565b60035415610c705760405162461bcd60e51b815260206004820152601760248201527f45544820726573657276657320776173206e6f7420302e0000000000000000006044820152606401610419565b60003411610cc05760405162461bcd60e51b815260206004820152601860248201527f4e6565642065746820746f2063726561746520706f6f6c2e00000000000000006044820152606401610419565b6040516370a0823160e01b81523360048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4b9190611874565b905080821115610daf5760405162461bcd60e51b815260206004820152602960248201527f4e6f74206861766520656e6f75676820746f6b656e7320746f20637265617465604482015268081d1a19481c1bdbdb60ba1b6064820152608401610419565b60008211610dff5760405162461bcd60e51b815260206004820152601b60248201527f4e65656420746f6b656e7320746f2063726561746520706f6f6c2e00000000006044820152606401610419565b6040516323b872dd60e01b8152336004820152306024820152604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610e72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e969190611852565b506040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610efb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1f9190611874565b6002819055346003819055610f33916118d2565b6001908155600354600091610f4791611826565b336000908152600460205260408120829055600680549293508392909190610f7090849061183f565b9091555050600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b03191633179055505050565b6000806000831161101e5760405162461bcd60e51b815260206004820152602660248201527f546f6b656e20616d6f756e74206d7573742062652067726561746572207468616044820152656e207a65726f60d01b6064820152608401610419565b600060025411801561103257506000600354115b6110715760405162461bcd60e51b815260206004820152601060248201526f496e76616c696420726573657276657360801b6044820152606401610419565b61108083600254600354611698565b611095846002546003546007546008546116c9565b91509150915091565b600080600083116110fd5760405162461bcd60e51b8152602060048201526024808201527f57656920616d6f756e74206d7573742062652067726561746572207468616e206044820152637a65726f60e01b6064820152608401610419565b600060025411801561111157506000600354115b6111505760405162461bcd60e51b815260206004820152601060248201526f496e76616c696420726573657276657360801b6044820152606401610419565b61115f83600354600254611698565b611095846003546002546007546008546116c9565b6000600582815481106111895761118961190b565b6000918252602090912001546001600160a01b031692915050565b600081116111ea5760405162461bcd60e51b815260206004820152601360248201527204e65656420746f6b656e7320746f207377617606c1b6044820152606401610419565b6040516370a0823160e01b815233600482015281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611250573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112749190611874565b10156112b65760405162461bcd60e51b81526020600482015260116024820152704e6f7420656e6f75676820746f6b656e7360781b6044820152606401610419565b604051636eb1769f60e11b815233600482015230602482015281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063dd62ed3e90604401602060405180830381865afa158015611322573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113469190611874565b10156113645760405162461bcd60e51b81526004016104199061188d565b60008061137083610fbc565b915091506001826003546113849190611826565b116113c85760405162461bcd60e51b81526020600482015260146024820152734e6f7420656e6f756768206c697175696469747960601b6044820152606401610419565b6040516323b872dd60e01b8152336004820152306024820152604481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af115801561143b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145f9190611852565b508260026000828254611472919061183f565b92505081905550806003600082825461148b9190611826565b9091555050604051600090339083908381818185875af1925050503d80600081146114d2576040519150601f19603f3d011682016040523d82523d6000602084013e6114d7565b606091505b505090508061151a5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606401610419565b50505050565b61152861161b565b6001600160a01b03811661155257604051631e4fbdf760e01b815260006004820152602401610419565b61155b81611648565b50565b60008084116115af5760405162461bcd60e51b815260206004820152601960248201527f62617365526573657276652063616e2774206265207a65726f000000000000006044820152606401610419565b6000831180156115bf5750600082115b6115fe5760405162461bcd60e51b815260206004820152601060248201526f696e76616c696420726573657276657360801b6044820152606401610419565b8261160983866118d2565b61161391906118e9565b949350505050565b6000546001600160a01b03163314610bc65760405163118cdaa760e01b8152336004820152602401610419565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806116a585846118d2565b905060006116b3868661183f565b90506116bf81836118e9565b9695505050505050565b6000806116d68484611826565b90506000876116e583886118d2565b6116ef91906118d2565b905060006116fd89846118d2565b611707868a6118d2565b611711919061183f565b905061171d81836118e9565b9998505050505050505050565b60006020828403121561173c57600080fd5b5035919050565b60006020828403121561175557600080fd5b81356001600160a01b038116811461176c57600080fd5b9392505050565b60008060006060848603121561178857600080fd5b505081359360208301359350604090920135919050565b600080604083850312156117b257600080fd5b50508035926020909101359150565b60006020808352835180602085015260005b818110156117ef578581018301518582016040015282016117d3565b506000604082860101526040601f19601f8301168501019250505092915050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561183957611839611810565b92915050565b8082018082111561183957611839611810565b60006020828403121561186457600080fd5b8151801515811461176c57600080fd5b60006020828403121561188657600080fd5b5051919050565b60208082526025908201527f4e6f7420656e6f75676820746f6b656e20616c6c6f77656420666f72207472616040820152643739b332b960d91b606082015260800190565b808202811582820484141761183957611839611810565b60008261190657634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fdfea26469706673582212203ab462c6ca1b3f3844065b7112ef69cfe8b6a6e2d3134793b438d1db99f6ee5464736f6c63430008190033";

type BBExchangeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BBExchangeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BBExchange__factory extends ContractFactory {
  constructor(...args: BBExchangeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    bbTokenAddr: AddressLike,
    initialOwner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      bbTokenAddr,
      initialOwner,
      overrides || {}
    );
  }
  override deploy(
    bbTokenAddr: AddressLike,
    initialOwner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(bbTokenAddr, initialOwner, overrides || {}) as Promise<
      BBExchange & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): BBExchange__factory {
    return super.connect(runner) as BBExchange__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BBExchangeInterface {
    return new Interface(_abi) as BBExchangeInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): BBExchange {
    return new Contract(address, _abi, runner) as unknown as BBExchange;
  }
}
