/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface BBExchangeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "EXCHANGE_NAME"
      | "MIN_LIQUIDITY"
      | "addLiquidity"
      | "createPool"
      | "getSwapFee"
      | "getTokenAmount"
      | "getWeiAmount"
      | "k"
      | "lpAt"
      | "lpLiquidity"
      | "owner"
      | "removeAllLiquidity"
      | "removeLiquidity"
      | "renounceOwnership"
      | "swapETHForTokens"
      | "swapTokensForETH"
      | "token"
      | "tokenReserves"
      | "totalLiquidity"
      | "transferOwnership"
      | "weiReserves"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;

  encodeFunctionData(
    functionFragment: "EXCHANGE_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_LIQUIDITY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWeiAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "k", values?: undefined): string;
  encodeFunctionData(functionFragment: "lpAt", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "lpLiquidity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeAllLiquidity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapETHForTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForETH",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "weiReserves",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "EXCHANGE_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_LIQUIDITY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSwapFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWeiAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "k", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lpLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAllLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapETHForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "weiReserves",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BBExchange extends BaseContract {
  connect(runner?: ContractRunner | null): BBExchange;
  waitForDeployment(): Promise<this>;

  interface: BBExchangeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  EXCHANGE_NAME: TypedContractMethod<[], [string], "view">;

  MIN_LIQUIDITY: TypedContractMethod<[], [bigint], "view">;

  addLiquidity: TypedContractMethod<
    [
      minWeiAmount: BigNumberish,
      tokenAmount: BigNumberish,
      minTokenAmount: BigNumberish
    ],
    [void],
    "payable"
  >;

  createPool: TypedContractMethod<
    [amountTokens: BigNumberish],
    [void],
    "payable"
  >;

  getSwapFee: TypedContractMethod<[], [[bigint, bigint]], "view">;

  getTokenAmount: TypedContractMethod<
    [weiAmount: BigNumberish],
    [[bigint, bigint] & { tokenAmount: bigint; withFee: bigint }],
    "view"
  >;

  getWeiAmount: TypedContractMethod<
    [tokenAmount: BigNumberish],
    [[bigint, bigint] & { weiAmount: bigint; withFee: bigint }],
    "view"
  >;

  k: TypedContractMethod<[], [bigint], "view">;

  lpAt: TypedContractMethod<[index: BigNumberish], [string], "view">;

  lpLiquidity: TypedContractMethod<[lp: AddressLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  removeAllLiquidity: TypedContractMethod<
    [maxExchangeRate: BigNumberish, minExchangeRate: BigNumberish],
    [void],
    "payable"
  >;

  removeLiquidity: TypedContractMethod<
    [
      amountETH: BigNumberish,
      maxExchangeRate: BigNumberish,
      minExchangeRate: BigNumberish
    ],
    [void],
    "payable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  swapETHForTokens: TypedContractMethod<
    [minTokenAmount: BigNumberish],
    [void],
    "payable"
  >;

  swapTokensForETH: TypedContractMethod<
    [tokenAmount: BigNumberish, minWeiAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  token: TypedContractMethod<[], [string], "view">;

  tokenReserves: TypedContractMethod<[], [bigint], "view">;

  totalLiquidity: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  weiReserves: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "EXCHANGE_NAME"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MIN_LIQUIDITY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addLiquidity"
  ): TypedContractMethod<
    [
      minWeiAmount: BigNumberish,
      tokenAmount: BigNumberish,
      minTokenAmount: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createPool"
  ): TypedContractMethod<[amountTokens: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "getSwapFee"
  ): TypedContractMethod<[], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "getTokenAmount"
  ): TypedContractMethod<
    [weiAmount: BigNumberish],
    [[bigint, bigint] & { tokenAmount: bigint; withFee: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getWeiAmount"
  ): TypedContractMethod<
    [tokenAmount: BigNumberish],
    [[bigint, bigint] & { weiAmount: bigint; withFee: bigint }],
    "view"
  >;
  getFunction(nameOrSignature: "k"): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lpAt"
  ): TypedContractMethod<[index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "lpLiquidity"
  ): TypedContractMethod<[lp: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeAllLiquidity"
  ): TypedContractMethod<
    [maxExchangeRate: BigNumberish, minExchangeRate: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "removeLiquidity"
  ): TypedContractMethod<
    [
      amountETH: BigNumberish,
      maxExchangeRate: BigNumberish,
      minExchangeRate: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "swapETHForTokens"
  ): TypedContractMethod<[minTokenAmount: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "swapTokensForETH"
  ): TypedContractMethod<
    [tokenAmount: BigNumberish, minWeiAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenReserves"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalLiquidity"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "weiReserves"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
