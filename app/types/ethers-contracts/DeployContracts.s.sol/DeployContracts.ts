/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface DeployContractsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "IS_SCRIPT"
      | "deployContracts"
      | "deployExchange"
      | "deployToken"
      | "run"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "IS_SCRIPT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deployContracts",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployExchange",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployToken",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "run", values?: undefined): string;

  decodeFunctionResult(functionFragment: "IS_SCRIPT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "run", data: BytesLike): Result;
}

export interface DeployContracts extends BaseContract {
  connect(runner?: ContractRunner | null): DeployContracts;
  waitForDeployment(): Promise<this>;

  interface: DeployContractsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  IS_SCRIPT: TypedContractMethod<[], [boolean], "view">;

  deployContracts: TypedContractMethod<
    [deployer: AddressLike, tokenSupply: BigNumberish],
    [[string, string] & { token: string; exchange: string }],
    "nonpayable"
  >;

  deployExchange: TypedContractMethod<
    [token: AddressLike, deployer: AddressLike],
    [string],
    "nonpayable"
  >;

  deployToken: TypedContractMethod<
    [supply: BigNumberish, deployer: AddressLike],
    [string],
    "nonpayable"
  >;

  run: TypedContractMethod<
    [],
    [
      [string, string, string] & {
        token: string;
        exchange: string;
        owner: string;
      }
    ],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "IS_SCRIPT"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "deployContracts"
  ): TypedContractMethod<
    [deployer: AddressLike, tokenSupply: BigNumberish],
    [[string, string] & { token: string; exchange: string }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deployExchange"
  ): TypedContractMethod<
    [token: AddressLike, deployer: AddressLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deployToken"
  ): TypedContractMethod<
    [supply: BigNumberish, deployer: AddressLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "run"
  ): TypedContractMethod<
    [],
    [
      [string, string, string] & {
        token: string;
        exchange: string;
        owner: string;
      }
    ],
    "nonpayable"
  >;

  filters: {};
}
